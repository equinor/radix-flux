apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitor
spec:
  releaseName: grafana
  chart:
    spec:
      chart: grafana
      version: ${GRAFANA_VERSION} # Set by postbuild
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  interval: 5m
  install:
    remediation:
      retries: 3
  postRenderers:
    - kustomize:
        patches:
          - target:
              version: v1
              kind: Deployment
              name: grafana
              namespace: monitor
            patch: |
              - op: add
                path: /spec/template/spec/containers/0/volumeMounts
                value: 
                  - mountPath: /var/run/secrets/ossrdbms-aad
                    name: access-token-volume
                    readOnly: true
                  - mountPath: /var/lib/grafana/
                    name: grafana-lib

              - op: add
                path: /spec/template/spec/containers/0/securityContext
                value:
                  readOnlyRootFilesystem: true
            
              - op: add
                path: /spec/template/spec/shareProcessNamespace
                value: true
  values:
    global:
      imageRegistry: ${RADIX_CACHE_REGISTRY:=tba}

    ingress:
      enabled: true
      hosts:
        - grafana.${clusterName}.${AZ_RESOURCE_DNS}
        - grafana.${AZ_RESOURCE_DNS}
      tls:
        - secretName: radix-wildcard-tls-cert
          hosts:
            - grafana.${clusterName}.${AZ_RESOURCE_DNS}
            - grafana.${AZ_RESOURCE_DNS}

    podLabels:
      azure.workload.identity/use: "true"
    serviceAccount:
      annotations:
        azure.workload.identity/client-id: ${GRAFANA_WI_CLIENT_ID}

    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
    resources:
      # limits:
      #   cpu: "2"
      #   memory: "2000Mi"
      requests:
        cpu: "50m"
        memory: "250Mi"
    nodeSelector: {"kubernetes.io/os": "linux"}
    env:
      GF_DATABASE_TYPE: mysql
      GF_DATABASE_SSL_MODE: "skip-verify"
      GF_DATABASE_CA_CERT_PATH: /etc/ssl/certs/ca-certificates.crt
      # GF_SERVER_ROOT_URL: ""                    # Set by secret
      # GF_DATABASE_PASSWORD: ""                  # Set by secret
      # GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ""   # Set by secret
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_AUTH_GENERIC_OAUTH_NAME: Azure AD
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid email name
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: https://login.microsoftonline.com/3aa4a235-b6e2-48d5-9195-7fcf05b459b0/oauth2/authorize
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: https://login.microsoftonline.com/3aa4a235-b6e2-48d5-9195-7fcf05b459b0/oauth2/token
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: "Editor"     # Viewer|Editor|Admin
      GF_SERVER_ROOT_URL: https://grafana.${AZ_RESOURCE_DNS}
      GF_DATABASE_URL: mysql://${GRAFANA_DB_USERNAME}:$__file{/var/run/secrets/ossrdbms-aad/token}@${GRAFANA_DB_HOST}/grafana?allowCleartextPasswords=1
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${GRAFANA_AR_CLIENT_ID}
    envFromSecret: grafana-secrets

    extraContainerVolumes:
      - name: access-token-volume
        emptyDir: { }
      - name: grafana-lib
        emptyDir: { }
    extraInitContainers:
      - name: fetch-token
        image: mcr.microsoft.com/azure-cli:2.61.0
        securityContext:
          runAsUser: 472
        restartPolicy: Always
        startupProbe:
          exec:
            command: [ 'sh', '-c', '[ -s /tmp/token ]' ] # Check token exist and is not empty
          initialDelaySeconds: 5
        volumeMounts:
          - name: access-token-volume
            mountPath: /tmp
        env:
          - name: HOME
            value: "/tmp"
        command:
          - 'sh'
          - '-c'
          - |
            echo "$(date): starting..."
            az login --service-principal --username $AZURE_CLIENT_ID --tenant $AZURE_TENANT_ID --federated-token "$(cat $AZURE_FEDERATED_TOKEN_FILE)" --allow-no-subscriptions
            az account get-access-token --resource-type oss-rdbms --query accessToken --output tsv > /tmp/token
            jq -R 'split(".") | .[1] | @base64d | fromjson | .exp' <<< $(cat /tmp/token) > /tmp/token.exp
            
            echo "$(date): Restarting grafana..."
            killall -q -SIGINT grafana # If grafana already runs, kill it so it reloads with new token
            
            timeout="$(expr "$(cat /tmp/token.exp)" - 120)"
            now="$(date +%s)"
            sleepSeconds="$(expr $timeout - $now)"
            echo "$(date): Sleeping for $sleepSeconds seconds..."
            sleep "$sleepSeconds"
            echo "$(date): Finished."
            
