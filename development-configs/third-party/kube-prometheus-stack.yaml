---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: default
spec:
  releaseName: kube-prometheus-stack
  helmVersion: v3
  chart:
    repository: https://prometheus-community.github.io/helm-charts
    name: kube-prometheus-stack
    version: 16.5.0
  values:
    grafana:
      enabled: false
    nameOverride: prometheus-operator
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
      alertmanagerSpec:
        resources:
          requests:
            cpu: "10m"
            memory: "400Mi" # default 400Mi
      templateFiles: # https://github.com/prometheus-community/helm-charts/blob/bd7f3ca7efb7b5806b720b098144d1240c930a70/charts/kube-prometheus-stack/values.yaml#L192
        radix-app.tmpl: |-
          {{define "radix-app-env-slack-alert-text"}}
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
          *Component:* <{{ .Annotations.consoleUrl }}/applications/{{ .Labels.label_radix_app }}/envs/{{ .Labels.label_radix_env }}/component/{{ .Labels.label_radix_component }}|{{ .Labels.label_radix_component }}>
          *Description:* {{ .Annotations.description }}
          {{end}}
          {{end}}
          {{define "radix-app-env-slack-alert-title"}}
          Alerts for application {{.CommonLabels.label_radix_app}} in environment {{.CommonLabels.label_radix_env}}
          {{end}}
          {{define "radix-app-env-slack-alert-titlelink"}}
          {{ .CommonAnnotations.nonexisting }}
          {{end}}
    prometheusOperator:
      resources:
        requests:
          cpu: "100m" # default 100m
          memory: "100Mi" # default 100Mi
    kube-state-metrics:
      extraArgs:
        - --metric-labels-allowlist=pods=[radix-app,radix-component],namespaces=[radix-app,radix-env],jobs=[radix-app,radix-component,radix-job-type,radix-job-name,radix-pipeline]
    prometheus:
      prometheusSpec:
        resources:
          limits:
            memory: "16Gi"
          requests:
            cpu: "2"
            memory: "16Gi" # default 400Mi
        retention: 30d # default 10d
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: managed-premium-retain-nocache
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 1024Gi # default 50Gi
        additionalScrapeConfigs:
          - job_name: 'kubernetes-pods'
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: kubernetes_pod_name
    additionalPrometheusRulesMap: # https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
      radix-app:
        groups:
        - name: radix-app-env-alerts
          rules:
          - alert: RadixAppComponentCrashLooping
            labels:
              severity: error
            annotations:
              description: Component {{ $labels.label_radix_component}} in environment {{ $labels.label_radix_env }} for application {{ $labels.label_radix_app}} is crash-looping.
              summary: Component is crash looping
              consoleUrl: https://console.dev.radix.equinor.com
            expr: >-
              sum by (label_radix_app, label_radix_env, label_radix_component, namespace) (
                rate(kube_pod_container_status_restarts_total{job="kube-state-metrics",namespace=~".*"}[10m]) 
                * on(pod, namespace) group_left(label_radix_app, label_radix_component) (kube_pod_labels{label_radix_app!=""}) 
                * on(namespace) group_left(label_radix_env) (kube_namespace_labels{label_radix_env!=""}) * 60 * 5 > 0
              )>0
          - alert: RadixAppComponentNotReady
            labels:
              severity: warning
            annotations:
              description: Component {{ $labels.label_radix_component}} in environment {{ $labels.label_radix_env }} for application {{ $labels.label_radix_app}} has been in a non-ready state for more than 10 minutes.
              summary: Component is not ready
              consoleUrl: https://console.dev.radix.equinor.com
            for: 10m
            expr: >-
              sum by(label_radix_app, label_radix_env, label_radix_component, namespace) (
                max by(namespace, pod) (kube_pod_status_phase{job="kube-state-metrics",namespace=~".*",phase=~"Pending|Unknown"}) 
                * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind="ReplicaSet"})) 
                * on(pod, namespace) group_left(label_radix_app, label_radix_component) (kube_pod_labels{label_radix_app!=""})
                * on(namespace) group_left(label_radix_env) (kube_namespace_labels{label_radix_env!=""})
              )>0
